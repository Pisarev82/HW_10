# –ò–∑—É—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
# –ü–∏—Å–∞—Ä–µ–≤ –ù–∏–∫–æ–ª–∞–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á
# 09.11.2022
import logging

from aiogram import Dispatcher, Bot, types, executor
from aiogram.dispatcher.filters import Text

from bas import *

#–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.
API_TOKEN = 'ToKeN'
bot = Bot(token = API_TOKEN)
dp = Dispatcher(bot)

"""
 –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ logging. –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Ñ–∞–π–ª  log.txt
 –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–ø–∏—Å–∏ –¥–æ info —Å–æ–±—ã—Ç–∏–π.
"""
logging.basicConfig(
    filename = "log.txt",
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

"""
 –°–ª—É—à–∞—Ç–µ–ª—å `/start` –∏–ª–∏ `/help` –∫–æ–º–∞–Ω–¥
"""
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    kb = [
            [
            types.KeyboardButton(text="dice"),
            types.KeyboardButton(text="—Ü–∏—Ç–∞—Ç–∞ bashorg.org")
            ]
        ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("Hi!\nI'm EchoBot!\nPowered by aiogram.", reply_markup=keyboard)

@dp.message_handler(Text(equals="dice"))
@dp.message_handler(commands=['dice'])
async def cmd_dice(message: types.Message):
    """
     –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–æ–ª—å–Ω–∞—è —ç–º–æ–¥–∑–∏. –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ emoji –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    """
    msg1 = await message.answer_dice(emoji="üé≤")
    logger.info(f"{message.from_user.first_name}, –≤—ã–∫–∏–Ω—É–ª –Ω–∞ –∫—É–±–∏–∫–µ {msg1.dice.value}")
    """
     –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥: msg1.dice.value
    """


@dp.message_handler(Text(equals="—Ü–∏—Ç–∞—Ç–∞ bashorg.org"))
async def echo(message: types.Message):
    await message.answer(random_quote())
    logger.info(f"{message.from_user.first_name}, –ü—Ä–æ—á–∏—Ç–∞–ª —Ü–∏—Ç–∞—Ç—É –≤ –±–∞—à–µ.")

@dp.message_handler()
async def echo(message: types.Message):
    """
     –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    # old style:
    # await bot.send_message(message.chat.id, message.text)

    await message.answer(message.text)


#===========================================


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


